/**
 * Mixin for generating the basic button component.
 *
 */

/**
 * Create a pseudo-element arrow (triangle)
 *
 * @param  {String} $color: black         Color
 */
@mixin arrowPointer($color: black) {
  &:before {
    content: "";
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-bottom: 5px solid $color;
    top: -5px;
    left: 45%;
    position: absolute;
    top: -5px;
  }
}

/**
 * Assign a custom keyframe animation.
 *
 * @param  {String} $name       The name of the keyframe animation
 * @param  {String} $duration:  1s            Duration in seconds
 * @param  {String} $timing:    linear        Timing function to use
 * @param  {String} $count:     infinite      Iteration count
 * @param  {String} $direction: normal        Animation direction
 */
@mixin animateKeyframe($name, $duration: 1s,
    $timing: linear, $count: infinite, $direction: normal) {
        animation-name: $name;
        animation-duration: $duration;
        animation-timing-function: $timing;
        animation-iteration-count: $count;
        animation-direction: $direction;
}

/**
 * Creates a text-ellipsis overflow.
 *
 * @param  {size} $max-width: 430px            Maximum width
 * @param  {Boolean} $v-center:  false         Center vertically
 */
@mixin text-ellipsis($max-width: 430px, $v-center: false) {
    @if $v-center == true {
        vertical-align: middle;
    }

    display: inline-block;
    overflow: hidden;
    white-space: nowrap;
    max-width: $max-width;
    text-overflow: ellipsis;
}

/**
 * Generate several animations at once for nth-children.
 * @param  {[type]} $animate... [description]
 * @return {[type]}             [description]
 */
@mixin animation($animate...) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }

    -webkit-animation: $animations;
    -moz-animation:    $animations;
    animation:         $animations;
}

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }

    @-moz-keyframes #{$animationName} {
        @content;
    }

    @keyframes #{$animationName} {
        @content;
    }
}

%fade-in-out {
    transition: opacity .15s ease-in-out;
}

/**
 * Responsive Design Mixins
 */

@mixin respond-to($media) {
  @if $media == small {
    @media only screen and (max-width: $break-small) { @content; }
  }
  @else if $media == medium {
    @media only screen and (min-width: $break-medium) { @content; }
  }
  @else if $media == wide {
    @media only screen and (min-width: $break-large) { @content; }
  }
}