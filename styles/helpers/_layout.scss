/* ==========================================================================
   Margins & Padding
   ========================================================================== */

$props: ('margin', 'padding');
$subProps: ('', 'left', 'right', 'top', 'bottom');

@include generate-helper($props, $subProps) using ($selector, $property, $style) {
  #{$selector}-double {
    #{$property}: $layout-spacing-base * 2;
  }

  #{$selector} {
    #{$property}: $layout-spacing-base;
  }

  #{$selector}-half {
    #{$property}: $layout-spacing-base/2;
  }

  #{$selector}-quarter {
    #{$property}: $layout-spacing-base/4;
  }

  #{$selector}-clear {
    #{$property}: 0;
  }

  #{$selector}-auto {
    #{$property}: auto;
  }
}

/* ==========================================================================
   Visibility
   ========================================================================== */

$props: ('display');
$subProps: (none, block, inline-block, flex, inline-flex, inline);

@include generate-helper($props, $subProps) using ($selector, $property, $style) {
  #{$selector} {
    display: $style;
  }
}

$props: ('opacity');
$subProps: ('50', '100');

@include generate-helper($props, $subProps) using ($selector, $property, $style) {
  #{$selector} {
    opacity: #{$style + '%'};
  }
}

/* ==========================================================================
   Position
   ========================================================================== */

$props: ('position');
$subProps: (absolute, relative, fixed, initial, inherit, sticky, static, unset);

@include generate-helper($props, $subProps) using ($selector, $property, $style) {
  #{$selector} {
    position: $style;
  }
}

/* ==========================================================================
   Widths
   ========================================================================== */

$props: ('width');
$subProps: ('50', '100');

@include generate-helper($props, $subProps) using ($selector, $property, $style) {
  #{$selector} {
    width: unquote('#{$style}%');
  }
}

$props: ('width-spacing-base');
$subProps: (
  'quarter',
  'half',
  '1',
  '2',
  '3',
  '4',
  '5',
  '6',
  '7',
  '8',
  '9',
  '10'
);

@include generate-helper($props, $subProps) using ($selector, $property, $style) {
  @if $style == 'half' {
    #{$selector} {
      width: calc(0.5 * #{$layout-spacing-base});
    }
  } @else if $style == 'quarter' {
    #{$selector} {
      width: calc(0.25 * #{$layout-spacing-base});
    }
  } @else {
    #{$selector} {
      width: calc(#{$style} * #{$layout-spacing-base});
    }
  }
}

/* ==========================================================================
   Overflow
   ========================================================================== */

$props: ('overflow');
$subProps: (visible, hidden);

@include generate-helper($props, $subProps) using ($selector, $property, $style) {
  #{$selector} {
    overflow: $style;
  }
}

/* ==========================================================================
   Vertical align
   ========================================================================== */

$props: ('vertical-align');
$subProps: (
  baseline,
  inherit,
  top,
  bottom,
  middle,
  text-top,
  text-bottom,
  sub,
  super,
  length
);

@include generate-helper($props, $subProps) using ($selector, $property, $style) {
  #{$selector} {
    vertical-align: $style;
  }
}

/* ==========================================================================
   Align items
   ========================================================================== */

$props: ('align-items');
$subProps: (stretch, center, flex-start, flex-end, baseline, initial, inherit);

@include generate-helper($props, $subProps) using ($selector, $property, $style) {
  #{$selector} {
    align-items: $style;
  }
}

/* ==========================================================================
   Legibility
   ========================================================================== */

.space-between {
  justify-content: space-between;
}

/* ==========================================================================
   Heights
   ========================================================================== */

.full-height-minus-topbar {
  height: calc(100vh - #{$top-bar-height-medium});
  @include respond-to-max($screen-md) {
    height: calc(100vh - #{$top-bar-height});
  }
}

.dropdown-max-height {
  max-height: 250px;
  overflow-y: auto;
}

/* ==========================================================================
   Borders
   ========================================================================== */

$props: ('border-default');
$subProps: (top, bottom, left, right, full);
@include generate-helper($props, $subProps) using ($selector, $property, $style) {
  @if $style == 'full' {
    #{$selector} {
      border: $color-border-base 1px solid;
    }
  } @else {
    #{$selector} {
      border-#{$style}: $color-border-base 1px solid;
    }
  }
}
